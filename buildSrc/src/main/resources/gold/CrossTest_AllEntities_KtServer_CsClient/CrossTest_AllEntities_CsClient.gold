T| protocol.SEND                  | property `Server.DemoModel.property_with_default` :: ver = 0, value = "192"
T| protocol.SEND                  | property `Server.DemoModel.boolean_property` :: ver = 0, value = False
T| protocol.SEND                  | property `Server.DemoModel.boolean_array` :: ver = 0, value = [
  False
  True
  False
]
T| protocol.SEND                  | property `Server.DemoModel.scalar` :: ver = 0, value = MyScalar (
  bool = False
  byte = 50
  short = 32000
  int = 1000000000
  long = -2000000000000000000
  float = 3.14
  double = -123456789.012346
  unsigned_byte = 254
  unsigned_short = 65534
  unsigned_int = 4294967294
  unsigned_long = 18446744073709551614
  enum = net
  flags = anyFlag, netFlag
  myInitializedEnum = hundred
)
T| protocol.SEND                  | Set `Server.DemoModel.set`  :: Add :: 50
T| protocol.SEND                  | map `Server.DemoModel.mapLongToString`  :: Add :: key = 50 :: value = "C#"
T| protocol.SEND                  | property `Server.DemoModel.interned_string` :: ver = 0, value = "C#"
T| protocol.SEND                  | property `Server.DemoModel.interned_string` :: ver = 0, value = "protocol"
T| protocol.SEND                  | property `Server.DemoModel.interned_string` :: ver = 0, value = "C#"
T| protocol.SEND                  | property `Server.DemoModel.polymorphic` :: ver = 0, value = Derived (  string = "C# instance")
T| protocol.SEND                  | property `Server.DemoModel.polymorphic_open` :: ver = 0, value = OpenDerived (  openDerivedString = "C# instance open derived string"  openString = "C# instance open string")
T| protocol.SEND                  | property `Server.DemoModel.enum` :: ver = 0, value = net
T| protocol.SEND                  | signal `Server.DemoModel.extModel.checker` :: value = JetBrains.Core.Unit
T| protocol.RECV                  | property `Server.DemoModel.boolean_property` :: oldver = 0, newver = 0, value = False
T| protocol.RECV                  | property `Server.DemoModel.boolean_array` :: oldver = 0, newver = 0, value = [
  True
  False
  False
]
T| protocol.RECV                  | property `Server.DemoModel.scalar` :: oldver = 0, newver = 0, value = MyScalar (
  bool = False
  byte = 13
  short = 32000
  int = 1000000000
  long = -2000000000000000000
  float = 3.14
  double = -123456789.012346
  unsigned_byte = 254
  unsigned_short = 65534
  unsigned_int = 4294967294
  unsigned_long = 18446744073709551614
  enum = kt
  flags = anyFlag, ktFlag
  myInitializedEnum = hundred
)
T| protocol.RECV                  | property `Server.DemoModel.ubyte` :: oldver = 0, newver = 0, value = 242
T| protocol.RECV                  | property `Server.DemoModel.ubyte_array` :: oldver = 0, newver = 0, value = [
  13
  255
]
T| protocol.RECV                  | list `Server.DemoModel.list`  :: Add :: index=0 :: version = 1 :: value = 1
T| protocol.RECV                  | list `Server.DemoModel.list`  :: Add :: index=1 :: version = 2 :: value = 3
T| protocol.SEND                  | Set `Server.DemoModel.set`  :: Add :: 13
T| protocol.RECV                  | map `Server.DemoModel.mapLongToString`   :: Add :: key = 13 :: value = "Kotlin"
T| protocol.RECV                  | property `Server.DemoModel.interned_string` :: oldver = 0, newver = 0, value = "Kotlin"
T| protocol.RECV                  | property `Server.DemoModel.interned_string` :: oldver = 0, newver = 0, value = "protocol"
T| protocol.RECV                  | property `Server.DemoModel.interned_string` :: oldver = 0, newver = 0, value = "Kotlin"
T| protocol.RECV                  | property `Server.DemoModel.polymorphic` :: oldver = 0, newver = 0, value = Derived (  string = "Kotlin instance")
T| protocol.RECV                  | property `Server.DemoModel.polymorphic_open` :: oldver = 0, newver = 0, value = OpenDerived (  openDerivedString = "Kotlin instance open derived string "  openString = "Kotlin instance open string")
T| protocol.RECV                  | property `Server.DemoModel.date` :: oldver = 0, newver = 0, value = 1/1/1970 12:00:13 AM
T| protocol.RECV                  | property `Server.DemoModel.enum` :: oldver = 0, newver = 0, value = kt
T| protocol.RECV                  | signal `Server.DemoModel.extModel.checker` :: value = JetBrains.Core.Unit
